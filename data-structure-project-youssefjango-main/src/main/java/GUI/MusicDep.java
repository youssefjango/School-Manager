/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Convertors.DataConvertor;
import Exceptions.IDInSameSchoolException;
import Exceptions.InfoException;
import School.Departement;
import Sorters.Sort;
import Workers.Dean;
import Workers.Staff;
import Workers.Teacher;
import java.awt.Window;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 * The Music Depratment panel.
 *
 * @author YOUSSEF
 */
public class MusicDep extends javax.swing.JFrame {

    private final static String PATH_OF_DEP = "Database\\Music.txt";

    /**
     * Creates new form EnglishDep
     */
    public MusicDep() {
        initComponents();
        nameLabels();
        startTables();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        teacherTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        staffTable = new javax.swing.JTable();
        addStaffButton = new javax.swing.JButton();
        addTeacherButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        ageTeacherAdder = new javax.swing.JTextField();
        teacherNameAdder = new javax.swing.JTextField();
        emailTeacherAdder = new javax.swing.JTextField();
        specialtyTeacherAdder = new javax.swing.JTextField();
        hoursPerWeekTeacherAdder = new javax.swing.JTextField();
        isPartTimeTeacherAdder = new javax.swing.JCheckBox();
        isMaleTeacherAdder = new javax.swing.JCheckBox();
        yearsOfExperienceTeacherAdder = new javax.swing.JTextField();
        degreeTeacherAdder = new javax.swing.JTextField();
        IDTeacherAdder = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        nameStaffAdder = new javax.swing.JTextField();
        ageStaffAdder = new javax.swing.JTextField();
        emailStaffAdder = new javax.swing.JTextField();
        yearsOfExpStaffAdder = new javax.swing.JTextField();
        IDstaffAdder = new javax.swing.JTextField();
        workloadStaffAdder = new javax.swing.JTextField();
        dutyStaffAdder = new javax.swing.JTextField();
        isMaleStaffAdder = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        IDDepartement = new javax.swing.JLabel();
        numberOfStudent = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        deanYears = new javax.swing.JLabel();
        deanName = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        yearsOfExpDeanChanger = new javax.swing.JTextField();
        IDDeanChanger = new javax.swing.JTextField();
        changeDeanButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        teacherRemoverButton = new javax.swing.JButton();
        IDTeacherRemover = new javax.swing.JTextField();
        staffRemoverButton = new javax.swing.JButton();
        IDStaffRemover = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        IDSortTeacher = new javax.swing.JButton();
        nameSortTeacher = new javax.swing.JButton();
        ageSortTeacher = new javax.swing.JButton();
        salarySortTeacher = new javax.swing.JButton();
        ageSortStaff = new javax.swing.JButton();
        IDsortStaff = new javax.swing.JButton();
        nameSortStaff = new javax.swing.JButton();
        salarySortStaff = new javax.swing.JButton();
        hoursWorkedStaffSort = new javax.swing.JButton();
        hoursWorkedTeachersSort = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        jTextField3.setText("jTextField3");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Music Departement");

        jPanel1.setBackground(new java.awt.Color(204, 0, 51));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        teacherTable.setFont(new java.awt.Font("Gadugi", 0, 12)); // NOI18N
        teacherTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Age", "Full Name(L+F)", "Email", "Hours per week", "Years of Experience", "Degree", "Specialty", "Part Time", "Gender", "ID", "Salary($)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        teacherTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(teacherTable);

        staffTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Age", "Full Name(L+F)", "Email", "Hours per week", "Years of Experience", "Duty", "Gender", "ID", "Salary($)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        staffTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(staffTable);

        addStaffButton.setBackground(new java.awt.Color(255, 153, 153));
        addStaffButton.setForeground(new java.awt.Color(0, 0, 51));
        addStaffButton.setText("Add Staff");
        addStaffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStaffButtonActionPerformed(evt);
            }
        });

        addTeacherButton.setBackground(new java.awt.Color(255, 153, 153));
        addTeacherButton.setForeground(new java.awt.Color(0, 0, 51));
        addTeacherButton.setText("Add Teacher");
        addTeacherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTeacherButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(153, 255, 255));

        ageTeacherAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        ageTeacherAdder.setText("Age");

        teacherNameAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        teacherNameAdder.setText("Full Name (Last name First name)");
        teacherNameAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherNameAdderActionPerformed(evt);
            }
        });

        emailTeacherAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        emailTeacherAdder.setText("Email");
        emailTeacherAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTeacherAdderActionPerformed(evt);
            }
        });

        specialtyTeacherAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        specialtyTeacherAdder.setText("Specialty");
        specialtyTeacherAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specialtyTeacherAdderActionPerformed(evt);
            }
        });

        hoursPerWeekTeacherAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        hoursPerWeekTeacherAdder.setText("Hours Worked / Week");
        hoursPerWeekTeacherAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hoursPerWeekTeacherAdderActionPerformed(evt);
            }
        });

        isPartTimeTeacherAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        isPartTimeTeacherAdder.setText("Part Time");
        isPartTimeTeacherAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isPartTimeTeacherAdderActionPerformed(evt);
            }
        });

        isMaleTeacherAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        isMaleTeacherAdder.setText("Male");
        isMaleTeacherAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isMaleTeacherAdderActionPerformed(evt);
            }
        });

        yearsOfExperienceTeacherAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        yearsOfExperienceTeacherAdder.setText("Years of Experience");
        yearsOfExperienceTeacherAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearsOfExperienceTeacherAdderActionPerformed(evt);
            }
        });

        degreeTeacherAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        degreeTeacherAdder.setText("Degree");
        degreeTeacherAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degreeTeacherAdderActionPerformed(evt);
            }
        });

        IDTeacherAdder.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        IDTeacherAdder.setText("ID");
        IDTeacherAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDTeacherAdderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(ageTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(degreeTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isMaleTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(teacherNameAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearsOfExperienceTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(specialtyTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hoursPerWeekTeacherAdder, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isPartTimeTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teacherNameAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(specialtyTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hoursPerWeekTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearsOfExperienceTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isPartTimeTeacherAdder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(degreeTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDTeacherAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isMaleTeacherAdder))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(153, 255, 255));

        nameStaffAdder.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        nameStaffAdder.setText("Full Name (Last name First name)");
        nameStaffAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameStaffAdderActionPerformed(evt);
            }
        });

        ageStaffAdder.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        ageStaffAdder.setText("Age");
        ageStaffAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageStaffAdderActionPerformed(evt);
            }
        });

        emailStaffAdder.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        emailStaffAdder.setText("Email");
        emailStaffAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailStaffAdderActionPerformed(evt);
            }
        });

        yearsOfExpStaffAdder.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        yearsOfExpStaffAdder.setText("Years of Experience");
        yearsOfExpStaffAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearsOfExpStaffAdderActionPerformed(evt);
            }
        });

        IDstaffAdder.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        IDstaffAdder.setText("ID");
        IDstaffAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDstaffAdderActionPerformed(evt);
            }
        });

        workloadStaffAdder.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        workloadStaffAdder.setText("Workload / week");
        workloadStaffAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workloadStaffAdderActionPerformed(evt);
            }
        });

        dutyStaffAdder.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        dutyStaffAdder.setText("Duty");
        dutyStaffAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dutyStaffAdderActionPerformed(evt);
            }
        });

        isMaleStaffAdder.setFont(new java.awt.Font("Dialog", 2, 12)); // NOI18N
        isMaleStaffAdder.setText("Male");
        isMaleStaffAdder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isMaleStaffAdderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(isMaleStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dutyStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearsOfExpStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(workloadStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDstaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ageStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isMaleStaffAdder)
                    .addComponent(dutyStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearsOfExpStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workloadStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDstaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailStaffAdder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Cascadia Mono", 1, 36)); // NOI18N
        jTextArea2.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea2.setRows(1);
        jTextArea2.setText("Music Departement");
        jTextArea2.setBorder(new javax.swing.border.MatteBorder(null));
        jTextArea2.setCaretColor(new java.awt.Color(0, 0, 204));
        jTextArea2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane5.setViewportView(jTextArea2);

        IDDepartement.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
        IDDepartement.setText("ID");

        numberOfStudent.setFont(new java.awt.Font("Eras Demi ITC", 0, 36)); // NOI18N
        numberOfStudent.setText("NumberOfStudent");

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));
        jPanel4.setForeground(new java.awt.Color(255, 255, 153));

        deanYears.setFont(new java.awt.Font("DialogInput", 1, 24)); // NOI18N
        deanYears.setText("Years of Experience as Dean");

        deanName.setFont(new java.awt.Font("DialogInput", 1, 24)); // NOI18N
        deanName.setText("Dean Name");

        jTextArea4.setEditable(false);
        jTextArea4.setBackground(new java.awt.Color(0, 0, 204));
        jTextArea4.setColumns(1);
        jTextArea4.setFont(new java.awt.Font("Microsoft New Tai Lue", 0, 36)); // NOI18N
        jTextArea4.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea4.setRows(1);
        jTextArea4.setText("Dean of Department\n");
        jScrollPane7.setViewportView(jTextArea4);

        yearsOfExpDeanChanger.setText("Years Of Experience");

        IDDeanChanger.setText("ID");

        changeDeanButton.setBackground(new java.awt.Color(255, 102, 102));
        changeDeanButton.setFont(new java.awt.Font("Dubai", 1, 18)); // NOI18N
        changeDeanButton.setForeground(new java.awt.Color(102, 255, 102));
        changeDeanButton.setText("Change Dean");
        changeDeanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeDeanButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(deanYears, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(yearsOfExpDeanChanger, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IDDeanChanger)
                            .addComponent(changeDeanButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(deanName, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jScrollPane7)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(deanName, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(deanYears, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(changeDeanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDDeanChanger, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(yearsOfExpDeanChanger, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        backButton.setBackground(new java.awt.Color(102, 255, 51));
        backButton.setFont(new java.awt.Font("Centaur", 1, 48)); // NOI18N
        backButton.setForeground(new java.awt.Color(0, 0, 255));
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        teacherRemoverButton.setText("Remove Teacher");
        teacherRemoverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherRemoverButtonActionPerformed(evt);
            }
        });

        IDTeacherRemover.setText("ID");
        IDTeacherRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDTeacherRemoverActionPerformed(evt);
            }
        });

        staffRemoverButton.setText("Remove Staff");
        staffRemoverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffRemoverButtonActionPerformed(evt);
            }
        });

        IDStaffRemover.setText("ID");

        jPanel5.setBackground(new java.awt.Color(255, 204, 204));
        jPanel5.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 153, 0)));

        IDSortTeacher.setBackground(new java.awt.Color(153, 153, 0));
        IDSortTeacher.setForeground(new java.awt.Color(0, 0, 102));
        IDSortTeacher.setText("ID");
        IDSortTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDSortTeacherActionPerformed(evt);
            }
        });

        nameSortTeacher.setBackground(new java.awt.Color(153, 153, 0));
        nameSortTeacher.setForeground(new java.awt.Color(0, 0, 102));
        nameSortTeacher.setText("Name");
        nameSortTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSortTeacherActionPerformed(evt);
            }
        });

        ageSortTeacher.setBackground(new java.awt.Color(153, 153, 0));
        ageSortTeacher.setForeground(new java.awt.Color(0, 0, 102));
        ageSortTeacher.setText("Age");
        ageSortTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageSortTeacherActionPerformed(evt);
            }
        });

        salarySortTeacher.setBackground(new java.awt.Color(153, 153, 0));
        salarySortTeacher.setForeground(new java.awt.Color(0, 0, 102));
        salarySortTeacher.setText("Salary");
        salarySortTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salarySortTeacherActionPerformed(evt);
            }
        });

        ageSortStaff.setBackground(new java.awt.Color(153, 153, 0));
        ageSortStaff.setForeground(new java.awt.Color(0, 0, 102));
        ageSortStaff.setText("Age");
        ageSortStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageSortStaffActionPerformed(evt);
            }
        });

        IDsortStaff.setBackground(new java.awt.Color(153, 153, 0));
        IDsortStaff.setForeground(new java.awt.Color(0, 0, 102));
        IDsortStaff.setText("ID");
        IDsortStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDsortStaffActionPerformed(evt);
            }
        });

        nameSortStaff.setBackground(new java.awt.Color(153, 153, 0));
        nameSortStaff.setForeground(new java.awt.Color(0, 0, 102));
        nameSortStaff.setText("Name");
        nameSortStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameSortStaffActionPerformed(evt);
            }
        });

        salarySortStaff.setBackground(new java.awt.Color(153, 153, 0));
        salarySortStaff.setForeground(new java.awt.Color(0, 0, 102));
        salarySortStaff.setText("Salary");
        salarySortStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salarySortStaffActionPerformed(evt);
            }
        });

        hoursWorkedStaffSort.setBackground(new java.awt.Color(153, 153, 0));
        hoursWorkedStaffSort.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        hoursWorkedStaffSort.setForeground(new java.awt.Color(0, 0, 102));
        hoursWorkedStaffSort.setText("Hours Worked");
        hoursWorkedStaffSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hoursWorkedStaffSortActionPerformed(evt);
            }
        });

        hoursWorkedTeachersSort.setBackground(new java.awt.Color(153, 153, 0));
        hoursWorkedTeachersSort.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        hoursWorkedTeachersSort.setForeground(new java.awt.Color(0, 0, 102));
        hoursWorkedTeachersSort.setText("Hours Worked");
        hoursWorkedTeachersSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hoursWorkedTeachersSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(IDSortTeacher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameSortTeacher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(salarySortTeacher, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hoursWorkedTeachersSort, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                    .addComponent(ageSortTeacher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ageSortStaff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nameSortStaff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(IDsortStaff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(salarySortStaff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hoursWorkedStaffSort, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageSortStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageSortTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDSortTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDsortStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameSortStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameSortTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salarySortTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salarySortStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursWorkedTeachersSort, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hoursWorkedStaffSort, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 66, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IDDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(numberOfStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(backButton)))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(IDStaffRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(staffRemoverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(teacherRemoverButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(IDTeacherRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(addTeacherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, Short.MAX_VALUE)
                                        .addComponent(addStaffButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(205, 205, 205)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addStaffButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addTeacherButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(teacherRemoverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(IDTeacherRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(IDStaffRemover, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(staffRemoverButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberOfStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDDepartement, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(87, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameLabels() {
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        numberOfStudent.setText(+d.getNumberOfStudent() + " Students");
        IDDepartement.setText("ID: " + d.getID() + "");
        deanName.setText(d.getDean().getName());
        deanYears.setText(d.getDean().getYearsOfDeanExp() + " years as dean");

        ageStaffAdder.setText("Age");
        yearsOfExpStaffAdder.setText("years of experience");
        IDstaffAdder.setText("ID");
        workloadStaffAdder.setText("Hours Worked / Week");
        emailStaffAdder.setText("email");
        dutyStaffAdder.setText("Specialty");
        nameStaffAdder.setText("Full Name (L + F)");
        isMaleTeacherAdder.setSelected(false);

        ageTeacherAdder.setText("Age");
        yearsOfExperienceTeacherAdder.setText("years of experience");
        IDTeacherAdder.setText("ID");
        hoursPerWeekTeacherAdder.setText("Hours Worked / Week");
        emailTeacherAdder.setText("email");
        specialtyTeacherAdder.setText("Specialty");
        teacherNameAdder.setText("Full Name (L + F)");
        degreeTeacherAdder.setText("degree");
        isMaleTeacherAdder.setSelected(false);
        isPartTimeTeacherAdder.setSelected(false);

    }
    DefaultTableModel modelTeacher;
    DefaultTableModel modelStaff;

    private void startTables() {
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        try {
            for (int i = 0; i < d.getTeachers().size(); i++) {
                modelTeacher.insertRow(modelTeacher.getRowCount(), new Object[]{
                    d.getTeachers().get(i).getAge(),
                    d.getTeachers().get(i).getName(),
                    d.getTeachers().get(i).getEmail(),
                    String.format("%.2f", d.getTeachers().get(i).getHoursWorked()),
                    d.getTeachers().get(i).getYearsOfExp(),
                    d.getTeachers().get(i).getDegree(),
                    d.getTeachers().get(i).getSpecialty().replace('_', ' '),
                    d.getTeachers().get(i).getIsPart_Time(),
                    d.getTeachers().get(i).getIsMale() ? "Male" : "Female",
                    String.format("%04d", d.getTeachers().get(i).getID()),
                    String.format("%.2f", d.getTeachers().get(i).ComputePayRoll())
                });
            }
            for (int i = 0; i < d.getStaffs().size(); i++) {

                modelStaff.insertRow(modelStaff.getRowCount(), new Object[]{
                    d.getStaffs().get(i).getAge(),
                    d.getStaffs().get(i).getName(),
                    d.getStaffs().get(i).getEmail(),
                    String.format("%.2f", d.getStaffs().get(i).getWorkload()),
                    d.getStaffs().get(i).getYearsOfExp(),
                    d.getStaffs().get(i).getDuty().replace('_', ' '),
                    d.getStaffs().get(i).getIsMale() ? "Male" : "Female",
                    String.format("%04d", d.getStaffs().get(i).getID()),
                    String.format("%.2f", d.getStaffs().get(i).ComputePayRoll())
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }
    private void addStaffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStaffButtonActionPerformed
        try {
            int age = Integer.parseInt(ageStaffAdder.getText());
            int yearsOfExp = Integer.parseInt(yearsOfExpStaffAdder.getText());
            int ID = Integer.parseInt(IDstaffAdder.getText());
            double workload = Integer.parseInt(workloadStaffAdder.getText());
            String email = emailStaffAdder.getText().trim();
            String duty = dutyStaffAdder.getText().trim().replace(' ', '_');
            String name = nameStaffAdder.getText().trim();

            if (duty.split(" ").length >= 2 || !email.contains("@") || name.split(" ").length != 2) {
                System.out.println("exception thrown");
                throw new InfoException();
            }
            boolean gender = isMaleStaffAdder.isSelected();
            Staff newStaff = new Staff(age, name, gender, workload,
                    email, yearsOfExp, ID, duty);
            Departement dMusic = DataConvertor.convertToObjects(PATH_OF_DEP);
            Departement dScience = DataConvertor.convertToObjects("Database\\Science.txt");
            Departement dSocialScience = DataConvertor.convertToObjects("Database\\Social Science.txt");
            Departement dEnglish = DataConvertor.convertToObjects("Database\\English.txt");

            for (int i = 0; i < dEnglish.getTeachers().size(); i++) {
                if (ID == dEnglish.getTeachers().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dEnglish.getDepartementName() + " Department as teacher.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dScience.getTeachers().size(); i++) {
                if (ID == dScience.getTeachers().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dScience.getDepartementName() + " Department as teacher.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dSocialScience.getTeachers().size(); i++) {
                JOptionPane.showMessageDialog(null, ID + " exists in the " + dSocialScience.getDepartementName() + " Department as teacher.");
                if (ID == dSocialScience.getTeachers().get(i).getID()) {
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dMusic.getTeachers().size(); i++) {
                if (ID == dMusic.getTeachers().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dMusic.getDepartementName() + " Department as teacher.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dEnglish.getStaffs().size(); i++) {
                if (ID == dEnglish.getStaffs().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dEnglish.getDepartementName() + " Department as staff.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dScience.getStaffs().size(); i++) {
                if (ID == dScience.getStaffs().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dScience.getDepartementName() + " Department as staff.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dSocialScience.getStaffs().size(); i++) {
                if (ID == dSocialScience.getStaffs().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dSocialScience.getDepartementName() + " Department as staff.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dMusic.getStaffs().size(); i++) {
                if (ID == dMusic.getStaffs().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dMusic.getDepartementName() + " Department as staff.");
                    throw new IDInSameSchoolException();
                }
            }
            dMusic.getStaffs().add(newStaff);
            DataConvertor.convertToFile(dMusic, PATH_OF_DEP);
            modelStaff = (DefaultTableModel) staffTable.getModel();
            modelTeacher = (DefaultTableModel) teacherTable.getModel();
            modelStaff.setRowCount(0);
            modelTeacher.setRowCount(0);
            startTables();
            JOptionPane.showMessageDialog(null, "Staff Added!");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, e);
        } catch (IDInSameSchoolException e) {

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        nameLabels();
    }//GEN-LAST:event_addStaffButtonActionPerformed

    private void addTeacherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTeacherButtonActionPerformed
        try {
            int age = Integer.parseInt(ageTeacherAdder.getText());
            int yearsOfExp = Integer.parseInt(yearsOfExperienceTeacherAdder.getText());
            int ID = Integer.parseInt(IDTeacherAdder.getText());

            int hoursWorked = Integer.parseInt(hoursPerWeekTeacherAdder.getText());
            String email = emailTeacherAdder.getText().trim();
            String specialty = specialtyTeacherAdder.getText().trim().replace(' ', '_');
            String name = teacherNameAdder.getText().trim();
            String degree = degreeTeacherAdder.getText().trim();
            if (!degree.toLowerCase().equals("phd") && !degree.toLowerCase().equals("master") && !degree.toLowerCase().equals("bachelor")) {
                throw new InfoException();
            }
            if (specialty.split(" ").length >= 2 || !email.contains("@") || email.contains(" ") || name.split(" ").length != 2 || ID > 9999) {
                throw new InfoException();
            }
            boolean gender = isMaleTeacherAdder.isSelected();
            boolean isPart_Time = isPartTimeTeacherAdder.isSelected();
            Teacher teacher = new Teacher(age, name, gender, hoursWorked,
                    email, yearsOfExp, ID, specialty,
                    degree, isPart_Time);
            if (!teacher.infoValidator()) {
                throw new Exception();
            }
            Departement dMusic = DataConvertor.convertToObjects(PATH_OF_DEP);
            Departement dScience = DataConvertor.convertToObjects("Database\\Science.txt");
            Departement dSocialScience = DataConvertor.convertToObjects("Database\\Social Science.txt");
            Departement dEnglish = DataConvertor.convertToObjects("Database\\English.txt");
            for (int i = 0; i < dEnglish.getStaffs().size(); i++) {
                if (ID == dEnglish.getStaffs().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dEnglish.getDepartementName() + " Department as staff.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dScience.getStaffs().size(); i++) {
                if (ID == dScience.getStaffs().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dScience.getDepartementName() + " Department as staff.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dSocialScience.getStaffs().size(); i++) {
                if (ID == dSocialScience.getStaffs().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dSocialScience.getDepartementName() + " Department as staff.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dMusic.getStaffs().size(); i++) {
                if (ID == dMusic.getStaffs().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dMusic.getDepartementName() + " Department as staff.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dEnglish.getTeachers().size(); i++) {
                if (ID == dEnglish.getTeachers().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dEnglish.getDepartementName() + " Department as teacher.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dScience.getTeachers().size(); i++) {
                if (ID == dScience.getTeachers().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dScience.getDepartementName() + " Department as teacher.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dSocialScience.getTeachers().size(); i++) {

                if (ID == dSocialScience.getTeachers().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dSocialScience.getDepartementName() + " Department as teacher.");
                    throw new IDInSameSchoolException();
                }
            }
            for (int i = 0; i < dMusic.getTeachers().size(); i++) {
                if (ID == dMusic.getTeachers().get(i).getID()) {
                    JOptionPane.showMessageDialog(null, ID + " exists in the " + dMusic.getDepartementName() + " Department as teacher.");
                    throw new IDInSameSchoolException();
                }
            }
            dMusic.getTeachers().add(teacher);
            // dEnglish.setTeachers(dEnglish.getTeachers());
            DataConvertor.convertToFile(dMusic, PATH_OF_DEP);
            modelTeacher = (DefaultTableModel) teacherTable.getModel();
            modelStaff = (DefaultTableModel) teacherTable.getModel();
            modelStaff.setRowCount(0);
            modelTeacher.setRowCount(0);
            startTables();
            JOptionPane.showMessageDialog(null, "Teacher Added!");

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Make sure to put numbers in the proper places");
        } catch (IDInSameSchoolException e) {
            JOptionPane.showMessageDialog(null, "There is a teacher in the school with the same ID.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid information");
        }
        nameLabels();
    }//GEN-LAST:event_addTeacherButtonActionPerformed

    private void teacherNameAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherNameAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teacherNameAdderActionPerformed

    private void yearsOfExpStaffAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearsOfExpStaffAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearsOfExpStaffAdderActionPerformed

    private void emailTeacherAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTeacherAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTeacherAdderActionPerformed

    private void specialtyTeacherAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specialtyTeacherAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_specialtyTeacherAdderActionPerformed

    private void IDstaffAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDstaffAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDstaffAdderActionPerformed

    private void hoursPerWeekTeacherAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hoursPerWeekTeacherAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hoursPerWeekTeacherAdderActionPerformed

    private void isMaleTeacherAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isMaleTeacherAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isMaleTeacherAdderActionPerformed

    private void nameStaffAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameStaffAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameStaffAdderActionPerformed

    private void emailStaffAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailStaffAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailStaffAdderActionPerformed

    private void yearsOfExperienceTeacherAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearsOfExperienceTeacherAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearsOfExperienceTeacherAdderActionPerformed

    private void IDTeacherAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDTeacherAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDTeacherAdderActionPerformed

    private void isPartTimeTeacherAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isPartTimeTeacherAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isPartTimeTeacherAdderActionPerformed

    private void workloadStaffAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workloadStaffAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_workloadStaffAdderActionPerformed

    private void dutyStaffAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dutyStaffAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dutyStaffAdderActionPerformed

    private void isMaleStaffAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isMaleStaffAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isMaleStaffAdderActionPerformed

    private void degreeTeacherAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degreeTeacherAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_degreeTeacherAdderActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new DepSelection().setVisible(true);
        JComponent comp = (JComponent) evt.getSource();
        Window win = SwingUtilities.getWindowAncestor(comp);
        win.dispose();

    }//GEN-LAST:event_backButtonActionPerformed

    private void changeDeanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeDeanButtonActionPerformed
        try {
            int ID = Integer.parseInt(IDDeanChanger.getText());
            int yearsOfExp = Integer.parseInt(yearsOfExpDeanChanger.getText());
            Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
            ArrayList<Teacher> ts = d.getTeachers();
            Teacher t = null;
            for (int i = 0; i < ts.size(); i++) {
                if (ID == ts.get(i).getID()) {
                    t = ts.get(i);
                }
            }
            if (t == null) {
                JOptionPane.showMessageDialog(null, "Invalid ID: Teacher not found(add teacher first before putting him dean)");
            } else {
                d.setDean(new Dean(t.getAge(), t.getName(), t.getIsMale(), t.getHoursWorked(),
                        t.getEmail(), t.getYearsOfExp(), t.getID(), t.getSpecialty(),
                        t.getDegree(), t.getIsPart_Time(), yearsOfExp));
                DataConvertor.convertToFile(d, PATH_OF_DEP);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid information");
        }
        IDDeanChanger.setText("ID");
        yearsOfExpDeanChanger.setText("Years Of Experience");
        nameLabels();
    }//GEN-LAST:event_changeDeanButtonActionPerformed

    private void IDTeacherRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDTeacherRemoverActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDTeacherRemoverActionPerformed

    private void teacherRemoverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherRemoverButtonActionPerformed
        try {
            int ID = Integer.parseInt(IDTeacherRemover.getText());
            Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
            ArrayList<Teacher> ts = d.getTeachers();
            Teacher t = null;
            if (ID == d.getDean().getID()) {
                JOptionPane.showMessageDialog(null, "Cannot remove dean. Dean has to be changed to remove the teacher.");
                return;
            }
            for (int i = 0; i < ts.size(); i++) {
                if (ID == ts.get(i).getID()) {
                    t = ts.remove(i);
                }
            }
            if (t == null) {
                JOptionPane.showMessageDialog(null, "Teacher not found");
            } else {
                DataConvertor.convertToFile(d, PATH_OF_DEP);
                modelTeacher = (DefaultTableModel) teacherTable.getModel();
                modelStaff = (DefaultTableModel) staffTable.getModel();
                modelStaff.setRowCount(0);
                modelTeacher.setRowCount(0);
                startTables();
                JOptionPane.showMessageDialog(null, "Teacher removed.");

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        IDTeacherRemover.setText("ID");
    }//GEN-LAST:event_teacherRemoverButtonActionPerformed

    private void staffRemoverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffRemoverButtonActionPerformed
        try {
            int ID = Integer.parseInt(IDStaffRemover.getText());
            Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
            ArrayList<Staff> sts = d.getStaffs();
            Staff t = null;
            for (int i = 0; i < sts.size(); i++) {
                if (ID == sts.get(i).getID()) {
                    t = sts.remove(i);

                }
            }
            if (t == null) {
                JOptionPane.showMessageDialog(null, "Staff not found.");
            } else {
                DataConvertor.convertToFile(d, PATH_OF_DEP);
                modelTeacher = (DefaultTableModel) teacherTable.getModel();
                modelStaff = (DefaultTableModel) staffTable.getModel();
                modelStaff.setRowCount(0);
                modelTeacher.setRowCount(0);
                startTables();
                JOptionPane.showMessageDialog(null, "Staff removed.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
        IDStaffRemover.setText("ID");
    }//GEN-LAST:event_staffRemoverButtonActionPerformed

    private void nameSortTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSortTeacherActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Teacher> teachersSortedByName = d.getTeachers();
        new Sort().sort(teachersSortedByName, new Comparators.NameComparator());
        d.setTeachers(teachersSortedByName);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted teachers by name!");
    }//GEN-LAST:event_nameSortTeacherActionPerformed

    private void ageSortTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageSortTeacherActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Teacher> teachersSortedByAge = d.getTeachers();
        new Sort().sort(teachersSortedByAge, new Comparators.AgeComparator());
        d.setTeachers(teachersSortedByAge);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted teachers by age!");

    }//GEN-LAST:event_ageSortTeacherActionPerformed

    private void salarySortTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salarySortTeacherActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Teacher> teachersSortedBySalary = d.getTeachers();
        new Sort().sort(teachersSortedBySalary, new Comparators.SalaryComparator());
        d.setTeachers(teachersSortedBySalary);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted teachers by the payload!");
    }//GEN-LAST:event_salarySortTeacherActionPerformed

    private void ageSortStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageSortStaffActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Staff> staffsSortedByAge = d.getStaffs();
        new Sort().sort(staffsSortedByAge, new Comparators.AgeComparator());
        d.setStaffs(staffsSortedByAge);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted staffs by age!");
    }//GEN-LAST:event_ageSortStaffActionPerformed

    private void IDsortStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDsortStaffActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Staff> staffsSortedByID = d.getStaffs();
        new Sort().sort(staffsSortedByID, new Comparators.IDComparator());
        d.setStaffs(staffsSortedByID);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted staffs by ID!");
    }//GEN-LAST:event_IDsortStaffActionPerformed

    private void IDSortTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDSortTeacherActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Teacher> teachersSortedByID = d.getTeachers();
        new Sort().sort(teachersSortedByID, new Comparators.IDComparator());
        d.setTeachers(teachersSortedByID);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted teachers by ID!");
    }//GEN-LAST:event_IDSortTeacherActionPerformed

    private void nameSortStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameSortStaffActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Staff> staffsSortedByName = d.getStaffs();
        new Sort().sort(staffsSortedByName, new Comparators.NameComparator());
        d.setStaffs(staffsSortedByName);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted staffs by name!");
    }//GEN-LAST:event_nameSortStaffActionPerformed

    private void hoursWorkedStaffSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hoursWorkedStaffSortActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Staff> staffsSortedByhoursWorked = d.getStaffs();
        new Sort().sort(staffsSortedByhoursWorked, new Comparators.WorkloadComparatorStaff());
        d.setStaffs(staffsSortedByhoursWorked);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted staffs by hours worked!");
    }//GEN-LAST:event_hoursWorkedStaffSortActionPerformed

    private void salarySortStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salarySortStaffActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Staff> staffsSortedBySalary = d.getStaffs();
        new Sort().sort(staffsSortedBySalary, new Comparators.SalaryComparator());
        d.setStaffs(staffsSortedBySalary);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted staffs by payload!");
    }//GEN-LAST:event_salarySortStaffActionPerformed

    private void hoursWorkedTeachersSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hoursWorkedTeachersSortActionPerformed
        Departement d = DataConvertor.convertToObjects(PATH_OF_DEP);
        ArrayList<Teacher> teachersSortedByHoursWorked = d.getTeachers();
        new Sort().sort(teachersSortedByHoursWorked, new Comparators.HoursWorkedComparatorTeacher());
        d.setTeachers(teachersSortedByHoursWorked);
        DataConvertor.convertToFile(d, PATH_OF_DEP);
        modelTeacher = (DefaultTableModel) teacherTable.getModel();
        modelStaff = (DefaultTableModel) staffTable.getModel();
        modelStaff.setRowCount(0);
        modelTeacher.setRowCount(0);
        startTables();
        JOptionPane.showMessageDialog(null, "Sorted teachers by hours worked!");
    }//GEN-LAST:event_hoursWorkedTeachersSortActionPerformed

    private void ageStaffAdderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageStaffAdderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageStaffAdderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusicDep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusicDep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusicDep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusicDep.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusicDep().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDDeanChanger;
    private javax.swing.JLabel IDDepartement;
    private javax.swing.JButton IDSortTeacher;
    private javax.swing.JTextField IDStaffRemover;
    private javax.swing.JTextField IDTeacherAdder;
    private javax.swing.JTextField IDTeacherRemover;
    private javax.swing.JButton IDsortStaff;
    private javax.swing.JTextField IDstaffAdder;
    private javax.swing.JButton addStaffButton;
    private javax.swing.JButton addTeacherButton;
    private javax.swing.JButton ageSortStaff;
    private javax.swing.JButton ageSortTeacher;
    private javax.swing.JTextField ageStaffAdder;
    private javax.swing.JTextField ageTeacherAdder;
    private javax.swing.JButton backButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton changeDeanButton;
    private javax.swing.JLabel deanName;
    private javax.swing.JLabel deanYears;
    private javax.swing.JTextField degreeTeacherAdder;
    private javax.swing.JTextField dutyStaffAdder;
    private javax.swing.JTextField emailStaffAdder;
    private javax.swing.JTextField emailTeacherAdder;
    private javax.swing.JTextField hoursPerWeekTeacherAdder;
    private javax.swing.JButton hoursWorkedStaffSort;
    private javax.swing.JButton hoursWorkedTeachersSort;
    private javax.swing.JCheckBox isMaleStaffAdder;
    private javax.swing.JCheckBox isMaleTeacherAdder;
    private javax.swing.JCheckBox isPartTimeTeacherAdder;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton nameSortStaff;
    private javax.swing.JButton nameSortTeacher;
    private javax.swing.JTextField nameStaffAdder;
    private javax.swing.JLabel numberOfStudent;
    private javax.swing.JButton salarySortStaff;
    private javax.swing.JButton salarySortTeacher;
    private javax.swing.JTextField specialtyTeacherAdder;
    private javax.swing.JButton staffRemoverButton;
    private javax.swing.JTable staffTable;
    private javax.swing.JTextField teacherNameAdder;
    private javax.swing.JButton teacherRemoverButton;
    private javax.swing.JTable teacherTable;
    private javax.swing.JTextField workloadStaffAdder;
    private javax.swing.JTextField yearsOfExpDeanChanger;
    private javax.swing.JTextField yearsOfExpStaffAdder;
    private javax.swing.JTextField yearsOfExperienceTeacherAdder;
    // End of variables declaration//GEN-END:variables

}
